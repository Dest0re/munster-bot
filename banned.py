# -*- coding: utf8 -*- 

import asyncio
import random
import time
import sqlite3
import os

import discord
from loguru import logger as log

from guildeventmanager import BybyrskyEmbedGuildEventManager, BybyrskyEventManager

DISCORD_BOT_TOKEN = os.getenv('TOKEN')
FILE_PATH = './phrases'
SEPARATOR = '$=jopa'
COMMENT = '#'
GROUPS = ('on_ban', 'on_unban', 'on_remove', 'on_return', 'on_join')

GUILD_ID = 785770770869256233

MEMBER_ROLE_ID = 789548860602974209
BOT_ROLE_ID = 785802866077859880

TEXT_CHANNEL_ID = 785790712854609951
RULES_CHANNEL_ID = 785791232122421288
INVITE_CHANNEL_ID = 789561456009543712
SUICIDE_CHANNEL_ID = 785791435093966879
ANNOUNCEMENTS_CHANNEL_ID = 789551174520012830
NOTIFICATIONS_CHANNEL_ID = 785791145191538718
SUGGESTIONS_CHANNEL_ID = 785791296362119190
ADMIN_SUGGESTIONS_CHANNEL_ID = 805081981074931712

BAN_MESSAGE_ID = 789556960516767774

GREETING_MESSAGE = '''{m}, —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –°–∏–±–∏—Ä—Å–∫–æ–≥–æ! –ë–µ—Ä—É –Ω–∞ —Å–µ–±—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ—Ç –ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.
–ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —É —Ç–µ–±—è –Ω–µ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å —Ç–µ–º, —á—Ç–æ–±—ã –≤–ª–∏—Ç—å—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤.
–ú–æ–∂–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º —Å–µ—Ä–≤–µ—Ä–∞ —Å–∞–º, –∞ –º–æ–∂–µ—à—å –Ω–∞–∂–∞—Ç—å –Ω–∞ "üìï" –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ç–æ–≥–¥–∞ —è –ø–æ—è—Å–Ω—é —Ç–µ–±–µ –≤—Å—ë –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª—Å –ø–µ—Ä–≤—ã–º.'''

GUILD_ANNOTATION = '''–í –æ–±—â–µ–º, —Å–ª—É—à–∞–π.
–°–µ—Ä–≤–µ—Ä —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—Ü–∏–π: —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Å–ø–∞–º–∞, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã, —Å–µ–∫—Ü–∏—è "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ" - —Å –Ω–µ–π —Ç–µ–±–µ –ª—É—á—à–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, - –∏ —Å–µ–∫—Ü–∏—è "–≤–∞–∂–Ω–æ–µ". 
–í –Ω–µ–π —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –∫–∞–Ω–∞–ª —Å –∏–Ω–≤–∞–π—Ç–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä (<#{invite}>), –∑–∞–≥–ª—è–Ω–∏ —Ç—É–¥–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–∑–≤–∞—Ç—å –¥—Ä—É–∑–µ–π, –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ (<#{rules}>), 
–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∏–º–∏, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å–ø–µ–ª, <#{announcements}> –∏  <#{notifications}> - –∫–∞–Ω–∞–ª—ã —Å –∞–Ω–æ–Ω—Å–∞–º–∏ –∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∂–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –≤ –∫–∞–Ω–∞–ª <#{suggestions}> –∏–∑ —Ç–æ–π –∂–µ —Å–µ–∫—Ü–∏–∏.
–£—á—Ç–∏, —á—Ç–æ –º—ã —Ç—É—Ç –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ–º—Å—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–Ω–µ–±—Ä–µ–∂–µ–Ω–∏—è –º–Ω–µ–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏ –æ—Ç–Ω–µ—Å–∏—Å—å —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º, –µ—Å–ª–∏ —Ç–≤–æ—è –ø—Ä–æ—Å—å–±–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ù–æ –º—ã –≤—Å–µ–≥–¥–∞ –≤ –ø–æ–∏—Å–∫–∞—Ö —Å–ø–æ—Å–æ–±–æ–≤ —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞, –∏ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º –≤–∞—à–∏—Ö –∑–¥—Ä–∞–≤—ã—Ö –∏–¥–µ–π. 
–ï—â—ë –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª <#{suicide}>. –í –Ω—ë–º –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - –∑–∞–¥–∞–≤–∞–π –∏—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª, —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –∏–ª–∏ –∞–¥–º–∏–Ω—ã, –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç–ª–∏—á–∏—Ç—å –ø–æ —Ä–æ–ª–∏ "–£–≥–Ω–µ—Ç–∞—é—â–∏–π –∫–ª–∞—Å—Å". 
–ù–∞ —ç—Ç–æ–º –≤—Å—ë, —É–¥–∞—á–Ω–æ–≥–æ —Ç–µ–±–µ –æ–±—â–µ–Ω–∏—è!'''

GUILD_ANNOTATION_MESSAGE = GUILD_ANNOTATION.format(invite=INVITE_CHANNEL_ID, 
    rules=RULES_CHANNEL_ID, announcements=ANNOUNCEMENTS_CHANNEL_ID,
    notifications=NOTIFICATIONS_CHANNEL_ID, suggestions=SUGGESTIONS_CHANNEL_ID,
    suicide=SUICIDE_CHANNEL_ID)


class Client(discord.Client):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.guild = None
        self.ban_message = None
        self.notifications_channel = None
        self.admin_suggestions_channel = None
        self.suggestions_channel = None
        self.text_channel = None
        self.member_role = None
        self.bot_role = None

        self.event_manager: BybyrskyEventManager = None

        self.connection = sqlite3.connect('banned.db')
        self.cur = self.connection.cursor()

        log.info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!')


    def get_strikes(self, author_id):
        t = (author_id, )
        self.cur.execute('select member_id, strikes from trash_suggestions where member_id = ?', t)
        strikes = self.cur.fetchone()
        if strikes:
            return strikes[1]
        return 0

    def generate_embed(self, message):
        embed = discord.Embed(title="–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", description=message.content)
        embed.set_author(name=str(message.author), icon_url=str(message.author.avatar_url))
        embed.set_footer(text=time.ctime(time.time() -  60 * 60 * 2))
        embed.add_field(name='–®—Ç—Ä–∞—Ñ—ã', value=self.get_strikes(message.author.id), inline=False)
        return embed

    def add_messages_to_fetch_list(self, *args):
        for message in args:
            if message not in self._connection._messages:
                self._connection._messages.append(message)

    def remove_messages_from_fetch_list(self, *args):
        for message in args:
            if message in self._connection._messages:
                self._connection._messages.remove(message)

    async def on_ready(self):
        log.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å...')
        log.info(f'–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è –∫–∞–∫ {self.user.display_name}.')

        self.guild = self.get_guild(GUILD_ID)
        self.ban_message = await self.get_channel(SUICIDE_CHANNEL_ID).fetch_message(BAN_MESSAGE_ID)
        self.notifications_channel = self.get_channel(NOTIFICATIONS_CHANNEL_ID)
        self.admin_suggestions_channel = self.get_channel(ADMIN_SUGGESTIONS_CHANNEL_ID)
        self.suggestions_channel = self.get_channel(SUGGESTIONS_CHANNEL_ID)
        self.text_channel = self.get_channel(TEXT_CHANNEL_ID)
        self.member_role = self.guild.get_role(MEMBER_ROLE_ID)
        self.bot_role = self.guild.get_role(BOT_ROLE_ID)

        self.event_manager = BybyrskyEmbedGuildEventManager(self.notifications_channel, self.text_channel)

        messages = []
        for row in self.cur.execute('select message_id from suggestion_messages'):
            messages.append(await self.admin_suggestions_channel.fetch_message(row[0]))

        self.add_messages_to_fetch_list(self.ban_message)
        self.add_messages_to_fetch_list(*messages)

        log.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

    async def on_member_ban(self, guild, user):
        await self.wait_until_ready()
        if guild.id == GUILD_ID:
            asyncio.get_event_loop().create_task(self.event_manager.send_ban_message(user))

    async def on_member_unban(self, guild, user):
        await self.wait_until_ready()
        if guild.id == GUILD_ID:
            await self.send(user, 'on_unban')

    async def on_member_remove(self, member):
        await self.wait_until_ready()
        if member.guild.id == GUILD_ID:
            bans = await self.guild.bans()
            if not discord.utils.find(lambda e: e.user.id == member.id, bans):
                asyncio.get_event_loop().create_task(self.event_manager.send_leave_message(member))
            
            self.cur.execute('select * from leaved_users where id=?', (member.id,))
            if not self.cur.fetchone():
                t = (member.id, )
                self.cur.execute('insert into leaved_users values (?)', t)
                self.connection.commit()

    async def on_member_join(self, member):
        await self.wait_until_ready()
        if member.guild.id == GUILD_ID:
            if member.bot:
                await member.add_roles(self.bot_role, reason='–≠—Ç–æ –±–æ—Ç')
                log.info(f'{member}: –¥–∞—é —Ä–æ–ª—å –±–æ—Ç–∞')

            t = (member.id, )
            is_user_leaved = self.cur.execute('select id from leaved_users where id=?', t).fetchone()
            if is_user_leaved:
                asyncio.get_event_loop().create_task(self.event_manager.send_return_message(member))
            else:
                asyncio.get_event_loop().create_task(self.event_manager.send_join_message(member))

                greeting_message = await self.text_channel.send(GREETING_MESSAGE.format(m=member.mention))
                await greeting_message.add_reaction('üìï')
                try:
                    reaction, user = await self.wait_for('reaction_add', timeout=300.0, check=lambda r, u: u.id == member.id)
                except asyncio.TimeoutError:
                    log.info('–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫ –ø–æ–ø–∞–ª—Å—è.')
                    await greeting_message.clear_reactions()
                else:
                    await member.send(GUILD_ANNOTATION_MESSAGE)
                    await greeting_message.clear_reactions()
                    log.info('–ù–æ–≤–∏—á–æ–∫ –ø–æ–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—á—å, –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–º—É –≤ –ª—Å —Å–æ–æ–±—â–µ–Ω–∏–µ.')
    
    async def on_nitro_boost(self, member):
        asyncio.get_event_loop().create_task(self.event_manager.send_boost_message(member))

    async def on_reaction_add(self, reaction, user):
        await self.wait_until_ready()
        if reaction.message == self.ban_message:
            log.info(f'{user}: –∞–∫—Ç —Å–∞–º–æ–≤—ã–ø–∏–ª–∞')
            await self.ban_message.clear_reactions()
            try:
                await self.guild.ban(user, reason='–°–∞–º–æ–≤—ã–ø–∏–ª.', delete_message_days=0)
                asyncio.get_event_loop().create_task(self.event_manager.send_suicide_message(user))
                #await self.notifications_channel.send(f'{user.mention} –ø—Ä–µ–¥–ø–æ—á—ë–ª –±–∞–Ω. –¢–∞–∫–æ–≤–∞ –±—ã–ª–∞ –µ–≥–æ —Ä–µ–∞–∫—Ü–∏—è: {str(reaction)}.')
                log.info('–ñ–µ–ª–∞–Ω–∏–µ –±—ã–ª–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ.')
            except discord.errors.Forbidden:
                log.warning('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞!')
                asyncio.get_event_loop().create_task(self.event_manager.send_failed_suicide_message(user))
                # await self.notifications_channel.send(f'{user.mention} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–∫–æ–Ω—á–∏—Ç—å —Å —Å–æ–±–æ–π, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ –≤—ã—à–ª–æ! \nhttps://www.youtube.com/watch?v=Yic_aU1cmQ4')
        elif row := self.cur.execute('select author_id from suggestion_messages where message_id=?', (reaction.message.id, )).fetchone():
            if user != self.user:
                if reaction.emoji in ('‚úî', '‚ùå', '‚ôª'):
                    t = (reaction.message.id,)
                    self.remove_messages_from_fetch_list(reaction.message)
                    self.cur.execute('delete from suggestion_messages where message_id=?', t)
                    self.connection.commit()

                    author_id = row[0]
                    author = await self.fetch_user(author_id)
                    embed = reaction.message.embeds[0]
                    if reaction.emoji == '‚úî':
                        t = (author_id,)
                        action = '–ø—Ä–∏–Ω—è—Ç–æ'
                        new_color = discord.Colour(0x7fff00)
                        self.cur.execute('update or ignore trash_suggestions set strikes=0 where member_id=?', t)
                        self.connection.commit()
                        await self.suggestions_channel.set_permissions(self.guild.get_member(author_id), overwrite=None)
                    elif reaction.emoji == '‚ùå':
                        action = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
                        new_color = discord.Colour(0xffa500)
                    elif reaction.emoji == '‚ôª':
                        new_color = discord.Colour(0xff0000)
                        t = (author_id,)
                        if self.cur.execute('select * from trash_suggestions where member_id=?', t).fetchone():
                            self.cur.execute('update trash_suggestions set strikes=strikes+1 where member_id=?', t)
                            self.connection.commit()
                            if self.cur.execute('select strikes from trash_suggestions where member_id=?', t).fetchone()[0] >= 3:
                                await self.suggestions_channel.set_permissions(self.guild.get_member(author_id), send_messages=False)
                        else:
                            self.cur.execute('insert into trash_suggestions values (?, ?)', (author_id, 1))
                            self.connection.commit()

                        action = f'–ø—Ä–∏–∑–Ω–∞–Ω–æ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø–æ —Ñ–æ—Ä–º–∞—Ç—É. –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç—Ä—ë—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥'

                    embed.colour = new_color

                    await reaction.message.edit(embed=embed)
                    await reaction.message.clear_reactions()

                    embed.set_field_at(0, name='–®—Ç—Ä–∞—Ñ—ã', value=self.get_strikes(author_id))
                    await author.send(f'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É! –°–æ–æ–±—â–∞—é, —á—Ç–æ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ {action}.', embed=embed)

    async def on_message(self, message):
        await self.wait_until_ready()
        if message.channel.type == discord.ChannelType.private:
            if message.author != self.user:
                if message.content != '+':
                    log.info(f'{message.author} –ø–æ–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è, –∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.')
                    await message.channel.send(GUILD_ANNOTATION_MESSAGE)
        elif message.channel == self.suggestions_channel:
            await message.delete()
            embed = self.generate_embed(message)
            sugg_message = await self.admin_suggestions_channel.send(embed=embed)
            t = (sugg_message.id, message.author.id, None)
            self.cur.execute('insert into suggestion_messages values (?, ?, ?)', t)
            self.connection.commit()

            await message.author.send('–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ / –∂–∞–ª–æ–±–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Ç—Ä–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥ –≤–ª–µ–∫—É—Ç –∑–∞ —Å–æ–±–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –¥–ª—è –∂–∞–ª–æ–±.', embed=embed)
            await sugg_message.add_reaction('‚úî')
            await sugg_message.add_reaction('‚ùå')
            await sugg_message.add_reaction('‚ôª')
            self.add_messages_to_fetch_list(sugg_message)
        elif message.channel == self.admin_suggestions_channel:
            if message.reference:
                if message.reference.channel_id == self.admin_suggestions_channel.id:
                    if self.cur.execute('select * from suggestion_messages where message_id=?', (message.reference.message_id,)).fetchone():
                        sugg_message = await self.admin_suggestions_channel.fetch_message(message.reference.message_id)
                        embed = sugg_message.embeds[0]
                        if message.content:
                            if len(embed.fields) == 1:
                                embed.add_field(name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', value=message.content, inline=False)
                            else:
                                embed.set_field_at(1, name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', value=message.content, inline=False)
                        else:
                            if len(embed.fields) > 1:
                                embed.remove_field(1)
                        await message.delete()
                        new_sugg_message = await self.admin_suggestions_channel.send(embed=embed)
                        self.cur.execute('update suggestion_messages set message_id=? where message_id=?', (new_sugg_message.id, sugg_message.id))
                        self.connection.commit()
                        await new_sugg_message.add_reaction('‚úî')
                        await new_sugg_message.add_reaction('‚ùå')
                        await new_sugg_message.add_reaction('‚ôª')
                        self.add_messages_to_fetch_list(new_sugg_message)

                        await sugg_message.delete()

    async def on_member_update(self, before, after):
        if before.premium_since is None and after.premium_since is not None:
            await self.on_nitro_boost(after)

    def __del__(self):
        self.connection.close()


client = Client(intents=discord.Intents.all())  # Not good
client.run(DISCORD_BOT_TOKEN)
